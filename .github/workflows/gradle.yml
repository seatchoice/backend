name: Java CI with Gradle

# event trigger
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

# setup env
env:
  RESOURCE_PATH: ./src/main/resources/application.yml
  PROJECT_NAME: testproject
  # Database
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PW }}
  # Redis
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PW }}
  # JWT
  JWT_SECRET_KEY: ${{ secrets.JWT }}
  # AWS S3
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  S3_BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  S3_REGION: ${{ secrets.S3_REGION }}
  # oauth
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
  KAKAO_REDIRECT_URL: ${{ secrets.KAKAO_REDIRECT_URL }}
  # elasticSearch
  ELASTIC_SEARCH_HOST: ${{ secrets.ELASTIC_SEARCH_HOST }}
  ELASTIC_SEARCH_PORT: ${{ secrets.ELASTIC_SEARCH_PORT }}
  # kopis
  KOPIS_API_URL: ${{ secrets.KOPIS_URL }}
  KOPIS_API_KEY: ${{ secrets.KOPIS_KEY }}
  # cors
  CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
  # token
  AUTH_TOKEN_SECRET: ${{ secrets.AUTH_TOKEN_SECRET }}
  AUTH_TOKEN_EXPIRY: ${{ secrets.AUTH_TOKEN_EXPIRY }}
  AUTH_REFRESH_TOKEN_EXPIRY: ${{ secrets.AUTH_REFRESH_TOKEN_EXPIRY }}
  AUTHORIZED_REDIRECT_URI: ${{ secrets.AUTHORIZED_REDIRECT_URI }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # 그래들 캐싱
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
            
    - name: Generate Environment Variables File for Properties
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ env.RESOURCE_PATH }}
      env:
        spring.datasource.url: ${{ env.DB_URL }}
        spring.datasource.username: ${{ env.DB_USERNAME }}
        spring.datasource.password: ${{ env.DB_PASSWORD }}
        spring.redis.host: ${{ env.REDIS_HOST }}
        spring.redis.port: ${{ env.REDIS_PORT }}
        spring.redis.password: ${{ env.REDIS_PASSWORD }}
        spring.jwt.token.secret-key: ${{ env.JWT_SECRET_KEY }}
        cloud.aws.credentials.access-key: ${{ env.ACCESS_KEY }}
        cloud.aws.credentials.secret-key: ${{ env.SECRET_KEY }}
        cloud.aws.s3.bucket: ${{ env.S3_BUCKET_NAME }}
        cloud.aws.region.static: ${{ env.S3_REGION }}
        spring.oauth2.client.registration.kakao.client-id: ${{ env.KAKAO_CLIENT_ID }}
        spring.oauth2.client.registration.kakao.client-secret: ${{ env.KAKAO_CLIENT_SECRET }}
        spring.oauth2.client.registration.kakao.redirect-url: ${{ env.KAKAO_REDIRECT_URL }}
        elasticsearch.host: ${{ env.ELASTIC_SEARCH_HOST }}
        elasticsearch.port: ${{ env.ELASTIC_SEARCH_PORT }}
        kopis.api.url: ${{ env.KOPIS_API_URL }}
        kopis.api.key: ${{ env.KOPIS_API_KEY }}
        cors.allowed-origins: ${{ env.CORS_ORIGIN }}
        token.auth.tokenSecret: ${{ env.AUTH_TOKEN_SECRET }}
        token.auth.tokenExpiry: ${{ env.AUTH_TOKEN_EXPIRY }}
        token.auth.refreshTokenExpiry: ${{ env.AUTH_REFRESH_TOKEN_EXPIRY }}
        token.oauth2.authorizedRedirectUris: ${{ env.AUTHORIZED_REDIRECT_URI }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Build
    - name: Build with Gradle
      run: ./gradlew clean build

    # Spring app Docker Image Build
    - name: Build Docker Image For Spring
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

    # Run Doker Image From Server
    - name: EC2 Docker Run
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        password: ${{ secrets.EC2_PW }} 
        port: ${{ secrets.PORT }}
        script: |
          docker-compose down
          sudo docker rm -f $(docker ps -qa)
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
          docker-compose up -d
          docker image prune -f

  ## Connect to Slack
  action-slack:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Slack Alarm
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: GitHub-Actions CI/CD
          fields: repo,message,commit,author,ref,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.